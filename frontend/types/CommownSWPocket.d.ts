/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CommownSWPocketInterface extends ethers.utils.Interface {
  functions: {
    "data()": FunctionFragment;
    "id()": FunctionFragment;
    "item()": FunctionFragment;
    "owner()": FunctionFragment;
    "pStatus()": FunctionFragment;
    "pType()": FunctionFragment;
    "qty()": FunctionFragment;
    "setStatus(uint8)": FunctionFragment;
    "to()": FunctionFragment;
    "totalAmount()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(functionFragment: "item", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pStatus", values?: undefined): string;
  encodeFunctionData(functionFragment: "pType", values?: undefined): string;
  encodeFunctionData(functionFragment: "qty", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "to", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "item", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "qty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "to", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAmount",
    data: BytesLike
  ): Result;

  events: {};
}

export class CommownSWPocket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CommownSWPocketInterface;

  functions: {
    data(overrides?: CallOverrides): Promise<[string]>;

    id(overrides?: CallOverrides): Promise<[BigNumber]>;

    item(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pStatus(overrides?: CallOverrides): Promise<[number]>;

    pType(overrides?: CallOverrides): Promise<[number]>;

    qty(overrides?: CallOverrides): Promise<[BigNumber]>;

    setStatus(
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    to(overrides?: CallOverrides): Promise<[string]>;

    totalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  data(overrides?: CallOverrides): Promise<string>;

  id(overrides?: CallOverrides): Promise<BigNumber>;

  item(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pStatus(overrides?: CallOverrides): Promise<number>;

  pType(overrides?: CallOverrides): Promise<number>;

  qty(overrides?: CallOverrides): Promise<BigNumber>;

  setStatus(
    _status: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  to(overrides?: CallOverrides): Promise<string>;

  totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    data(overrides?: CallOverrides): Promise<string>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    item(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pStatus(overrides?: CallOverrides): Promise<number>;

    pType(overrides?: CallOverrides): Promise<number>;

    qty(overrides?: CallOverrides): Promise<BigNumber>;

    setStatus(_status: BigNumberish, overrides?: CallOverrides): Promise<void>;

    to(overrides?: CallOverrides): Promise<string>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    data(overrides?: CallOverrides): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    item(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pStatus(overrides?: CallOverrides): Promise<BigNumber>;

    pType(overrides?: CallOverrides): Promise<BigNumber>;

    qty(overrides?: CallOverrides): Promise<BigNumber>;

    setStatus(
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    to(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    item(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    qty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setStatus(
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    to(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
